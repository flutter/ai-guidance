
## Most Important rules for Dart development

- **PREREQUISITES**:
  - Before calling tools which operate on the project, you must use the `create_project` tool to create a project if it doesn't already exist.
- **Prefer Dart Tools**: Always use the `analyze_files`, `run_tests`, `dart_fix`, `dart_format`, and `pub` tools and other tools from the Dart MCP server instead of shell equivalents. Don't use the shell for the operations these tools address.
- **Using `create_project`**: When starting new projects, use the `create_project` tool to create new empty Flutter projects.
  - Don't rename existing projects to make a new project.
  - Give the project an appropriate package name.
- **Always use `pub` tool for dependencies**: **DO NOT EVER** manually modify dependencies in the `pubspec.yaml` file. Always use the `pub` tool to add and remove dependencies using the `add` and `remove` subcommands.
  - **Dev Dependencies**: When adding a package as a dev dependency with the `pub` tool, prefix the package name with `"dev:"`.
- **Use Absolute Roots**: When supplying roots to your Dart MCP server tools, be sure to supply absolute paths.
- **Tests Need Package Roots**: When supplying roots for `run_tests`, use the Dart package root.
- **Check `run_tests` output**: Don't misinterpret a failed test for a failed tool run. Check tool output carefully.
- After making Dart source code modifications, run `analyze_files` before running tests and address static analysis issues first. It is more efficient, and contains more information than running the tests and seeing how they fail to compile.
- Before committing changes to git, run `dart_fix` and `dart_format`.
- When creating git commit messages, always escape backticks and dollar signs. They will be interpreted as shell command escapes otherwise.
